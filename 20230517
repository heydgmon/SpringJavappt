# 리팩토링
---
# 리팩토링의 정의

소프트웨어의 겉보기 동작은 그대로 유지한 채, 코드를 이해하고 수정하기 쉽도록 내부 구조를 변경하는 기법

# 리팩토링이 필요한 이유 
리팩토링은 코드를 항상 깔끔한 상태로 만들어서 좋은 아키텍처로 가도록 유도하므로 훨씬 더 많은 기능을 빠르게 구현할 수 있음(한 마디로 경제성)

일반적으로 동작하는 코드를 변경하는 일은 한번 더 작업을 하는 것이므로 시간낭비라고 생각하기 쉽지만 
Design Stamina Hypothesis(디자인-스테미너 가설)에 따르면, 시간이 지날수록 복잡한 코드와 씨름하느라 개발 생산성이 저하됨

![image](https://github.com/heydgmon/rrrr/assets/40292371/b6debab6-bbd9-4baf-b13b-659322626874)

# 리팩토링이 필요한 시기
개발 과정은 크게 "기능구현"과 "리팩토링" 두 단계로 나뉘어진다.

---

1)언제 리팩토링을 해야할까? 리팩터링은 수시로 진행을 해야하며, 작업흐름에 자연스럽게 녹아들 수 있어야 한다.






[1] 기능을 새로 추가하기 직전 : 기능을 추가하기 쉽게만드는 것이 리팩터링의 핵심


[2] 코드를 이해하기 어려울때 : 코드만 보더라도 이해를 쉽게 할 수 있도록 변수와 함수의 이름을 변경



[3] 불필요한 코드를 발견했을때 : 코드가 비효율적으로 수행되는 것을 발견했을때 리팩터링을 진행



[4] 코드 리뷰를 할 때 : 작성자와 리뷰자가 함께 리팩터링을 진행하면서 자연스러운 페어프로그래밍을 진행


---
2)언제 리팩토링을 하지 말아야 할까?


 
[1]리펙토링 대신에 코드를 다시 작성하는 것이 좋은 경우



[2]프로젝트 마감일에 가까워졌을 경우


# 리팩토링의 기법

1)Extract Method : 코드 덩어리를 별도의 코드로 분리

그룹으로 묶을 수 있는 코드가 있다면 적절한 메소드를 만들어서 해당 코드를 메소드 안으로 이동

![image](https://github.com/heydgmon/rrrr/assets/40292371/0fb58da7-4614-456d-9d16-a8988f6df2b3)

장점 : 직관적, 중복 코드 감소

2)Inline Method : 위의 반대 개념

메소드 호출 부분이 메소드 자체보다 더 자세할 때 메소드 호출을 메소드 내용으로 바꾸고 메소드 삭제

![image](https://github.com/heydgmon/rrrr/assets/40292371/59a3ba9f-e32b-4ef7-a1a1-24f3d151c765)

장점 : 코드 간결화

3)Inline Temp : 변수에 대한 참조를 표현식 자체로 변경

![image](https://github.com/heydgmon/rrrr/assets/40292371/ea3a9f81-364a-4aba-827c-56b031d815be)

장점 :불필요한 변수를 제거하여 가독성 약간 향상시킴
단점 : 임시 값이 여러번 재사용된다면 성능이 저하될 수 있음

4) Replace Temp with Query : 임시 변수에 표현식의 결과를 저장하고 있다면 새로운 메소드에 표현식을 넣고 임시 변수대신 메소드 호출( Inline Temp가 사용됨)

![image](https://github.com/heydgmon/rrrr/assets/40292371/293341cd-4885-40d4-a266-740e520edb94)

장점 : 메소드 재사용이 되므로 중복 코드를 제거할 수 있음


리팩토링 기법 참고 자료 : https://refactoring.guru/refactoring/techniques

